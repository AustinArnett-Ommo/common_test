# This is a basic workflow to help you get started with Actions

name: Build

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    #runs-on: windows-latest
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest]
        #os: [windows-latest, ubuntu-latest, macos-latest]
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      #- name: Install cmake
      #  if: runner.os == 'Windows'
      #  run: choco install cmake
        
      # Retrieve install cache
      - uses: actions/cache@v2
        id: cache-install
        with:
          path: ./install
          key: ${{runner.os}}-install
          
      # Retrieve build cache
      - uses: actions/cache@v2
        id: cache-build
        with:
          path: ./build
          key: ${{runner.os}}-build

      # Create install dir if cache miss
      - name: Create install dir
        if: steps.cache-install.outputs.cache-hit != 'true'
        shell: bash
        run: mkdir install
        
      # Create build dir if cache miss
      - name: Create build dir
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: bash
        run: mkdir build
        
      # Create conda environment
      - name: Install conda
        uses: conda-incubator/setup-miniconda@v2
        with:
          python-version: "3.8"
      - name: Create conda environment
        shell: bash -l {0}
        run: conda create -n ommo_build_common mkl-devel openssl
        
      - name: Activate conda environment and list
        shell: bash -l {0}
        run: |
          conda activate ommo_build_common
          conda list
        
      # Configure
      - name: Configure
        shell: bash
        run: |
          cd build
          cmake ..
        
      # Replace wextra
      - name: wextra removal
        if: runner.os == 'Windows'
        shell: bash
        run: sed -i 's/set (CMAKE_C_FLAGS "-Wall -Wextra -pedantic ${CMAKE_C_FLAGS}")/#set (CMAKE_C_FLAGS "-Wall -Wextra -pedantic ${CMAKE_C_FLAGS}")/' test.txt
        
        # Replace wextra 2
      - name: wextra removal
        if: runner.os == 'Windows'
        shell: bash
        run: sed -i 's/set (CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic ${CMAKE_CXX_FLAGS}")/#set (CMAKE_CXX_FLAGS "-Wall -Wextra -pedantic ${CMAKE_CXX_FLAGS}")/' test.txt
        
      - name: cat wextra
        if: runner.os == 'Windows'
        shell: bash
        run: cat test.txt

      - name: Build
        shell: bash
        run: |
          cd build
          cmake --build . --config Release
      
      # Cache the install dir
      - uses: actions/cache@v2
        with:
          path: |
            install
            build
          key: ${{runner.os}}-install
          
      # Cache the build dir
      - uses: actions/cache@v2
        with:
          path: |
            build
          key: ${{runner.os}}-build
          
      - uses: papeloto/action-zip@v1
        with:
          files: install/nlohmann_json/include
          dest: install/nlohmann_json/packages.zip
          
      - uses: actions/upload-artifact@v2
        with:
          name: include-dir
          path: install/nlohmann_json/packages.zip
